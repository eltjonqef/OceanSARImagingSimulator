import matplotlib.pyplot as plt
import numpy as np
from numpy.fft import fft2, fftshift, ifft2, ifftshift
from SAR_imaging import SAR_imaging
class plots:
    def __init__(self, output_folder, sar:SAR_imaging):
        self.output_folder=output_folder
        self.sar:SAR_imaging=sar
        #self.plotMTFs()
        self.plotImages()
        # self.plotSARImage()
        self.plotSpectra()
        # plt.show()

    def plotImages(self):
        fig, (ax, ax1, ax2)=plt.subplots(1,3,layout='compressed',)
        start_x=self.sar.N_x//2-50
        end_x=self.sar.N_x//2+50
        start_y=self.sar.N_y//2-50
        end_y=self.sar.N_y//2+50
        im=ax.imshow(self.sar.surface[start_y:end_y,start_x:end_x],origin='lower',extent=[self.sar.dx*start_x,self.sar.dx*end_x,self.sar.dy*start_y,self.sar.dy*end_y])
        ax.set_xlabel("Azimuth [m]")
        ax.set_ylabel("Range [m]")
        ax.set_title("Ocean Wave Field")
        cb=fig.colorbar(im, ax=ax)
        cb.set_label("Elevation [m]")
        im1=ax1.imshow(self.sar.I[start_y:end_y,start_x:end_x],cmap='gray',origin='lower', extent=[self.sar.dx*start_x,self.sar.dx*end_x,self.sar.dy*start_y,self.sar.dy*end_y])
        ax1.set_xlabel("Azimuth [m]")
        ax1.set_ylabel("Range [m]")
        ax1.set_title("SAR Image")
        im2=ax2.imshow(self.sar.noisy_I[start_y:end_y,start_x:end_x],cmap='gray',origin='lower',extent=[self.sar.dx*start_x,self.sar.dx*end_x,self.sar.dy*start_y,self.sar.dy*end_y])
        ax2.set_xlabel("Azimuth [m]")
        ax2.set_ylabel("Range [m]")
        ax2.set_title("Noisy SAR Image")
        #fig.savefig(f'{self.output_folder}/SARImages.svg', format='svg', dpi=150, bbox_inches='tight', pad_inches=0.1)
        fig.savefig(f'{self.output_folder}/images.png', dpi=150, bbox_inches='tight', pad_inches=0.1)

    def plotMTFs(self):
        fig1, ((axTilt, axHydrodynamic), (axRB, axVB))=plt.subplots(2,2)
        axTilt.pcolor(self.sar.kx, self.sar.ky, abs(self.sar.tilt_mtf()), cmap='viridis')
        axTiltContour=axTilt.contour(self.sar.kx, self.sar.ky, abs(self.sar.tilt_mtf()), colors='w')
        axTilt.clabel(axTiltContour, axTiltContour.levels, inline=True, fontsize=10)
        axTilt.set_title("Tilt MTF")
        axTilt.set_xlabel("Azimuth Wavenumber")
        axTilt.set_ylabel("Range Wavenumber")
        axHydrodynamic.pcolor(self.sar.kx, self.sar.ky, abs(self.sar.hydrodynamic_mtf()))
        axHydrodynamicContour=axHydrodynamic.contour(self.sar.kx, self.sar.ky, abs(self.sar.hydrodynamic_mtf()), colors='w')
        axHydrodynamic.clabel(axHydrodynamicContour, axHydrodynamicContour.levels, inline=True, fontsize=10)
        axHydrodynamic.set_title("Hydrodynamic MTF")
        axHydrodynamic.set_xlabel("Azimuth Wavenumber")
        axHydrodynamic.set_ylabel("Range Wavenumber")
        axRB.pcolor(self.sar.kx, self.sar.ky, abs(self.sar.range_bunching_mtf()))
        axRBContour=axRB.contour(self.sar.kx, self.sar.ky, abs(self.sar.range_bunching_mtf()), colors='w')
        axRB.clabel(axRBContour, axRBContour.levels, inline=True, fontsize=10)
        axRB.set_title("Range Bunching MTF")
        axRB.set_xlabel("Azimuth Wavenumber")
        axRB.set_ylabel("Range Wavenumber")
        axVB.pcolor(self.sar.kx, self.sar.ky, abs(self.sar.velocity_bunching_mtf()))
        axVBContour=axVB.contour(self.sar.kx, self.sar.ky, abs(self.sar.velocity_bunching_mtf()), colors='w')
        axVB.clabel(axVBContour, axVBContour.levels, inline=True, fontsize=10)
        axVB.set_title("Velociy Bunching MTF")
        axVB.set_xlabel("Azimuth Wavenumber")
        axVB.set_ylabel("Range Wavenumber")
        fig1.tight_layout()
        #fig1.savefig(f'{self.output_folder}/mtfs.svg', format='svg', dpi=150, bbox_inches='tight', pad_inches=0.1)
        #fig1.savefig(f'{self.output_folder}/mtfs.pdf', format='pdf', dpi=150, bbox_inches='tight', pad_inches=0.1)

        fig2, (axOrbitalMTF, axOrbital)=plt.subplots(1,2)
        axOrbitalMTF.pcolor(self.sar.kx, self.sar.ky, abs(self.sar.orbital_velocity_mtf()), cmap='gist_gray')
        axOVContour=axOrbitalMTF.contour(self.sar.kx, self.sar.ky, abs(self.sar.orbital_velocity_mtf()), colors='w')
        axOrbitalMTF.clabel(axOVContour, axOVContour.levels, inline=True, fontsize=10)
        axOrbitalMTF.set_title("Orbital Velocity MTF")
        axOrbitalMTF.set_xlabel("Azimuth Wavenumber")
        axOrbitalMTF.set_ylabel("Range Wavenumber")
        plotColorbar=axOrbital.imshow(self.sar.mean_orbital_velocity(), origin='lower')
        axOrbital.set_title("Orbital Velocity")
        axOrbital.set_xlabel("Azimuth [N]")
        axOrbital.set_ylabel("Range [N]")
        # plt.colorbar(plotColorbar, ax=axOrbital)
        fig2.tight_layout()
        #fig2.savefig(f'{self.output_folder}/orbital.svg', format='svg', dpi=150, bbox_inches='tight', pad_inches=0.1)
        #fig2.savefig(f'{self.output_folder}/orbital.pdf', format='pdf', dpi=150, bbox_inches='tight', pad_inches=0.1)

        fig3, (axRARAbs, axRarPhase)=plt.subplots(1,2)
        axRARAbsPlot=axRARAbs.pcolor(self.sar.kx, self.sar.ky, abs(self.sar.RAR_MTF()), cmap='gist_gray')
        absContour=axRARAbs.contour(self.sar.kx, self.sar.ky, abs(self.sar.RAR_MTF()),20, colors='w')
        # plt.colorbar(axRARAbsPlot, ax=axRARAbs)
        axRARAbs.clabel(absContour, absContour.levels, inline=True, fontsize=10)
        axRARAbs.set_title("RAR MTF")
        axRARAbs.set_xlabel("Azimuth Wavenumber")
        axRARAbs.set_ylabel("Range Wavenumber")
        axRarPhasePlot=axRarPhase.pcolor(self.sar.kx, self.sar.ky, abs(np.angle(self.sar.RAR_MTF())), cmap='gist_gray')
        phaseContour=axRarPhase.contour(self.sar.kx, self.sar.ky, np.rad2deg(abs(np.angle(self.sar.RAR_MTF()))), 20, colors='w')
        # plt.colorbar(axRarPhasePlot, ax=axRarPhase)
        axRarPhase.clabel(phaseContour, phaseContour.levels, inline=True, fontsize=10)
        axRarPhase.set_title("RAR MTF")
        axRarPhase.set_xlabel("Azimuth Wavenumber")
        axRarPhase.set_ylabel("Range Wavenumber")
        fig3.tight_layout()
        #fig3.savefig(f'{self.output_folder}/rar.svg', format='svg', dpi=150, bbox_inches='tight', pad_inches=0.1)
        #fig3.savefig(f'{self.output_folder}/rar.pdf', format='pdf', dpi=150, bbox_inches='tight', pad_inches=0.1)

        fig4, (axSARAbs, axSARPhase)=plt.subplots(1,2)
        axRARAbsPlot=axSARAbs.pcolor(self.sar.kx, self.sar.ky, abs(self.sar.SAR_MTF()), cmap='gist_gray')
        absContourSAR=axSARAbs.contour(self.sar.kx, self.sar.ky, abs(self.sar.SAR_MTF()),20, colors='w')
        # plt.colorbar(axRARAbsPlot, ax=axSARAbs)
        axSARAbs.clabel(absContourSAR, absContourSAR.levels, inline=True, fontsize=10)
        axSARAbs.set_title("SAR MTF")
        axSARAbs.set_xlabel("Azimuth Wavenumber")
        axSARAbs.set_ylabel("Range Wavenumber")
        axsarPhasePlot=axSARPhase.pcolor(self.sar.kx, self.sar.ky, abs(np.angle(self.sar.SAR_MTF())), cmap='gist_gray')
        phaseContourSAR=axSARPhase.contour(self.sar.kx, self.sar.ky, np.rad2deg(abs(np.angle(self.sar.SAR_MTF()))), 20, colors='w')
        # plt.colorbar(axsarPhasePlot, ax=axSARPhase)
        axSARPhase.clabel(phaseContourSAR, phaseContourSAR.levels, inline=True, fontsize=10)
        axSARPhase.set_title("SAR MTF")
        axSARPhase.set_xlabel("Azimuth Wavenumber")
        axSARPhase.set_ylabel("Range Wavenumber")
        fig4.tight_layout()
        #fig4.savefig(f'{self.output_folder}/sar.svg', format='svg', dpi=150, bbox_inches='tight', pad_inches=0.1)
        #fig4.savefig(f'{self.output_folder}/sar.pdf', format='pdf', dpi=150, bbox_inches='tight', pad_inches=0.1)

    def plotSpectra(self):
        fig, ((ax1,ax2, ax3), (ax4, ax5, ax6))=plt.subplots(2, 3,layout='compressed',)
        ax1.contour(self.sar.kx, self.sar.ky, abs(self.sar.PSI))#, extent=(self.sar.kx.min(),self.sar.kx.max(),self.sar.ky.min(),self.sar.ky.max()))
        ax1.set_title("Original Spectrum")
        ax1.set_xlabel("Azimuth Wavenumber")
        ax1.set_ylabel("Range Wavenumber")
        ax2.contour(self.sar.kx, self.sar.ky,abs(fftshift(fft2(self.sar.surface))))#, extent=(self.sar.kx.min(),self.sar.kx.max(),self.sar.ky.min(),self.sar.ky.max()))
        ax2.set_title("Sea surface Spectrum")
        ax2.set_xlabel("Azimuth Wavenumber")
        ax2.set_ylabel("Range Wavenumber")
        ax3.contour(self.sar.kx, self.sar.ky,abs(fftshift(fft2(self.sar.noisy_I))))#, extent=(self.sar.kx.min(),self.sar.kx.max(),self.sar.ky.min(),self.sar.ky.max()))
        ax3.set_title("Noisy SAR Spectrum")
        ax3.set_xlabel("Azimuth Wavenumber")
        ax3.set_ylabel("Range Wavenumber")
        ax4.contour(self.sar.kx, self.sar.ky,abs(self.sar.linear_mapping_transform()))#, extent=(self.sar.kx.min(),self.sar.kx.max(),self.sar.ky.min(),self.sar.ky.max()))
        ax4.set_title("Linear Mapping")
        ax4.set_xlabel("Azimuth Wavenumber")
        ax4.set_ylabel("Range Wavenumber")
        ax5.contour(self.sar.kx, self.sar.ky,abs(self.sar.quasilinear_mapping_transform()))
        ax5.set_title("Quasilinear Mapping")
        ax5.set_xlabel("Azimuth Wavenumber")
        ax5.set_ylabel("Range Wavenumber")
        ax6.contour(self.sar.kx, self.sar.ky,abs((self.sar.nonlinear_mapping_transform(3))))
        ax6.set_title("Nonlinear Mapping")
        ax6.set_xlabel("Azimuth Wavenumber")
        ax6.set_ylabel("Range Wavenumber")
        if self.sar.wind_speed==10:
            ax1.set_xlim(-0.25,0.25)
            ax2.set_xlim(-0.25,0.25)
            ax3.set_xlim(-0.25,0.25)
            ax4.set_xlim(-0.25,0.25)
            ax5.set_xlim(-0.25,0.25)
            ax6.set_xlim(-0.25,0.25)
            ax1.set_ylim(-0.25,0.25)
            ax2.set_ylim(-0.25,0.25)
            ax3.set_ylim(-0.25,0.25)
            ax4.set_ylim(-0.25,0.25)
            ax5.set_ylim(-0.25,0.25)
            ax6.set_ylim(-0.25,0.25)
        elif self.sar.wind_speed==15:
            ax1.set_xlim(-0.125,0.125)
            ax2.set_xlim(-0.125,0.125)
            ax3.set_xlim(-0.125,0.125)
            ax4.set_xlim(-0.125,0.125)
            ax5.set_xlim(-0.125,0.125)
            ax6.set_xlim(-0.125,0.125)
            ax1.set_ylim(-0.125,0.125)
            ax2.set_ylim(-0.125,0.125)
            ax3.set_ylim(-0.125,0.125)
            ax4.set_ylim(-0.125,0.125)
            ax5.set_ylim(-0.125,0.125)
            ax6.set_ylim(-0.125,0.125)
        fig.tight_layout()
        #fig.savefig(f'{self.output_folder}/spectra.svg', format='svg', dpi=150, bbox_inches='tight', pad_inches=0.1)
        fig.savefig(f'{self.output_folder}/spectra.png', dpi=150, bbox_inches='tight', pad_inches=0.1)


# def plotCovariances(sar):
#     fig, (axFV,axFR,axFRV)=plt.subplots(1,3)
#     axFV.plot(fftshift(self.sar.f_v))
#     axFV.set_title("Orbital Velocity Covariance")
#     axFR.plot(fftshift(self.sar.f_r))
#     axFR.set_title("RAR Image Covariance")
#     axFRV.plot(fftshift(self.sar.f_rv))
#     axFRV.set_title("RAR Image Orbital Velocity Covariance")


def coherence_time():
    from scipy import special
    fig, ax=plt.subplots(1,1)
    wind_speed_19_5=np.logspace(0,1.2,100)#self.wind_speed*(19.5/10)**(1/7)
    frequencies=np.array([1.579,2.671,5.3,10,14,35])
    for f in frequencies:
        light_speed=299792458
        wavelength=light_speed/(f*1e9)
        ts=3*wavelength/wind_speed_19_5*special.erf(2.7*30/wind_speed_19_5**2)**(-1/2)
        ax.plot(wind_speed_19_5,ts*1000,label=f"{f} GHz")

    ax.set_yscale('log')
    ax.set_xscale('log')
    ax.set_xlabel("Windspeed [m/s]")
    ax.set_ylabel("Coherence Time [ms]")
    ax.set_title("Coherence time")
    plt.legend()
    fig.savefig('coherence_time.png', dpi=150, bbox_inches='tight', pad_inches=0.1)